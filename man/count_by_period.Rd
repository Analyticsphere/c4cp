% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/count_by_period.R
\name{count_by_period}
\alias{count_by_period}
\title{Aggregate Records by Specified Time Period}
\usage{
count_by_period(tbl, date_col, period = "week", week_start = "MONDAY")
}
\arguments{
\item{tbl}{A \code{dbplyr} table object connected to BigQuery. Typically obtained using \code{tbl(con, "table_name")}.}

\item{date_col}{A quoted or unquoted column name representing the date to be transformed and aggregated. Utilizes tidy evaluation for flexibility.}

\item{period}{A character string specifying the aggregation period. Acceptable values are \code{"week"}, \code{"month"}, and \code{"quarter"}. Defaults to \code{"week"}.}

\item{week_start}{A character string indicating the starting day of the week when \code{period = "week"}. Acceptable values are \code{"MONDAY"} and \code{"SUNDAY"}. Defaults to \code{"MONDAY"}. This parameter is ignored when \code{period = "month"} or \code{"quarter"}.}
}
\value{
A \code{dbplyr} table object containing two columns:
\describe{
  \item{\code{period_start}}{The start date of the aggregation period (Monday for weeks, the first day of the month for months, and the first day of the quarter for quarters).}
  \item{\code{num_records}}{The count of records within each aggregation period.}
}
}
\description{
Transforms a date column in a \code{dbplyr} table connected to BigQuery by truncating each date to the start of the specified period (week, month, or quarter) and aggregates the data by counting the number of records in each period.
}
\details{
The \code{count_by_period} function is designed to streamline the process of aggregating time-series data by specified periods. It leverages the \code{dplyr} and \code{dbplyr} packages to translate R code into optimized SQL queries compatible with BigQuery.

\strong{Key Features:}
\itemize{
  \item **Flexible Aggregation:** Supports weekly, monthly, and quarterly aggregations.
  \item **Custom Week Start:** Allows specification of the week's starting day (Monday or Sunday) for weekly aggregations.
  \item **Tidy Evaluation:** Accepts both quoted and unquoted column names for ease of use.
  \item **Performance Optimized:** Designed to work efficiently with large datasets in BigQuery by translating operations into SQL.
}

\strong{Note:} Ensure that the \code{date_col} contains valid date values to prevent errors during the transformation process. The function automatically filters out \code{NULL} dates.
}
\examples{
\dontrun{
# Load necessary libraries
library(dplyr)
library(dbplyr)
library(DBI)
library(bigrquery)

# Establish a connection to BigQuery
project_id <- "your-project-id"
dataset_id <- "your_dataset"
con <- dbConnect(
  bigrquery::bigquery(),
  project = project_id,
  dataset = dataset_id,
  use_legacy_sql = FALSE
)

# Reference your BigQuery table
your_table <- tbl(con, "your_table")

# Aggregate counts by week (default settings)
weekly_counts <- count_by_period(your_table, p.d_471593703)
weekly_counts_local <- weekly_counts \%>\% collect()
print(weekly_counts_local)

# Aggregate counts by week starting on Sunday
weekly_sunday_counts <- count_by_period(your_table, p.d_471593703, period = "week", week_start = "SUNDAY")
weekly_sunday_counts_local <- weekly_sunday_counts \%>\% collect()
print(weekly_sunday_counts_local)

# Aggregate counts by month
monthly_counts <- count_by_period(your_table, p.d_471593703, period = "month")
monthly_counts_local <- monthly_counts \%>\% collect()
print(monthly_counts_local)

# Aggregate counts by quarter
quarterly_counts <- count_by_period(your_table, p.d_471593703, period = "quarter")
quarterly_counts_local <- quarterly_counts \%>\% collect()
print(quarterly_counts_local)
}

}
