[{"path":"https://analyticsphere.github.io/c4cp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 c4cp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Aggregating Recruitment Data by Time Period","text":"Ensure following packages installed loaded:","code":"install.packages(c(\"dplyr\", \"dbplyr\", \"bigrquery\", \"DBI\", \"rlang\", \"devtools\")) devtools::install_github(\"Analyticsphere/c4cp\")  # Load the necessary libraries: library(dplyr) library(dbplyr) library(bigrquery) library(DBI) library(c4cp)"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"establishing-a-connection-to-bigquery","dir":"Articles","previous_headings":"","what":"Establishing a Connection to BigQuery","title":"Aggregating Recruitment Data by Time Period","text":"First, establish connection BigQuery project dataset.","code":"# Define your project and dataset IDs project_id <- \"nih-nci-dceg-connect-stg-5519\" dataset_id <- \"FlatConnect\"  # Establish the connection con <- dbConnect(   bigrquery::bigquery(),   project = project_id,   dataset = dataset_id,   use_legacy_sql = FALSE )  # Reference the 'participants_JP' table in the 'FlatConnect' dataset your_table <- tbl(con, \"FlatConnect.participants_JP\")"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"aggregating-counts-by-week","dir":"Articles","previous_headings":"","what":"Aggregating Counts by Week","title":"Aggregating Recruitment Data by Time Period","text":"Aggregate number records week, week starting Monday (default setting).","code":"# Aggregate counts by week weekly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"week\",   date_type = \"string\" )  # Collect the results into R weekly_counts_local <- weekly_counts %>% collect()  # View the aggregated weekly counts print(weekly_counts_local)"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"example-output","dir":"Articles","previous_headings":"Aggregating Counts by Week","what":"Example Output:","title":"Aggregating Recruitment Data by Time Period","text":"","code":"# A tibble: 109 × 2    period_start        num_records    <dttm>                    <int>  1 2022-05-30 00:00:00           8  2 2022-06-06 00:00:00          15  3 2022-06-13 00:00:00          31  4 2022-06-20 00:00:00           7  5 2022-06-27 00:00:00          14  6 2022-07-04 00:00:00          30  7 2022-07-11 00:00:00          26  8 2022-07-18 00:00:00          10  9 2022-07-25 00:00:00          12 10 2022-08-01 00:00:00           2 # ℹ 99 more rows # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"show-the-sql-query-that-was-generated","dir":"Articles","previous_headings":"Aggregating Counts by Week","what":"Show the SQL Query that was Generated","title":"Aggregating Recruitment Data by Time Period","text":"","code":"weekly_counts %>% show_query() <SQL> SELECT `period_start`, count(*) AS `num_records` FROM (   SELECT     `d_471593703`,     TIMESTAMP_TRUNC(CAST(`d_471593703` AS TIMESTAMP), WEEK(MONDAY)) AS `period_start`   FROM `FlatConnect.participants_JP`   WHERE (NOT((`d_471593703` IS NULL))) ) `q01` GROUP BY `period_start` ORDER BY `period_start`"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"aggregating-counts-by-month","dir":"Articles","previous_headings":"","what":"Aggregating Counts by Month","title":"Aggregating Recruitment Data by Time Period","text":"Aggregate number records month.","code":"# Aggregate counts by month monthly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"month\" )  # Collect the results into R monthly_counts_local <- monthly_counts %>% collect()  # View the aggregated monthly counts print(monthly_counts_local)"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"example-output-1","dir":"Articles","previous_headings":"Aggregating Counts by Month","what":"Example Output:","title":"Aggregating Recruitment Data by Time Period","text":"","code":"# A tibble: 29 × 2    period_start        num_records    <dttm>                    <int>  1 2022-06-01 00:00:00          70  2 2022-07-01 00:00:00          83  3 2022-08-01 00:00:00          29  4 2022-09-01 00:00:00          48  5 2022-10-01 00:00:00          65  6 2022-11-01 00:00:00         171  7 2022-12-01 00:00:00         192  8 2023-01-01 00:00:00          20  9 2023-02-01 00:00:00          31 10 2023-03-01 00:00:00          93 # ℹ 19 more rows # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"aggregating-counts-by-quarter","dir":"Articles","previous_headings":"","what":"Aggregating Counts by Quarter","title":"Aggregating Recruitment Data by Time Period","text":"Aggregate number records quarter.","code":"# Aggregate counts by quarter quarterly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"quarter\" )  # Collect the results into R quarterly_counts_local <- quarterly_counts %>% collect()  # View the aggregated quarterly counts print(quarterly_counts_local)"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"example-output-2","dir":"Articles","previous_headings":"Aggregating Counts by Quarter","what":"Example Output:","title":"Aggregating Recruitment Data by Time Period","text":"","code":"# A tibble: 11 × 2    period_start        num_records    <dttm>                    <int>  1 2022-04-01 00:00:00          70  2 2022-07-01 00:00:00         160  3 2022-10-01 00:00:00         428  4 2023-01-01 00:00:00         144  5 2023-04-01 00:00:00         141  6 2023-07-01 00:00:00         114  7 2023-10-01 00:00:00         191  8 2024-01-01 00:00:00         172  9 2024-04-01 00:00:00         115 10 2024-07-01 00:00:00         121 11 2024-10-01 00:00:00           2"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"aggregating-counts-by-week-starting-on-sunday","dir":"Articles","previous_headings":"","what":"Aggregating Counts by Week Starting on Sunday","title":"Aggregating Recruitment Data by Time Period","text":"Customize aggregation weeks start Sunday instead default Monday.","code":"# Aggregate counts by week starting on Sunday weekly_sunday_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"week\",   week_start = \"SUNDAY\" )  # Collect the results into R weekly_sunday_counts_local <- weekly_sunday_counts %>% collect()  # View the aggregated weekly counts starting on Sunday print(weekly_sunday_counts_local)"},{"path":"https://analyticsphere.github.io/c4cp/articles/count_by_period_vignette.html","id":"example-output-3","dir":"Articles","previous_headings":"Aggregating Counts by Week Starting on Sunday","what":"Example Output","title":"Aggregating Recruitment Data by Time Period","text":"","code":"# A tibble: 109 × 2    period_start        num_records    <dttm>                    <int>  1 2022-05-29 00:00:00           8  2 2022-06-05 00:00:00          15  3 2022-06-12 00:00:00          31  4 2022-06-19 00:00:00           7  5 2022-06-26 00:00:00          14  6 2022-07-03 00:00:00          30  7 2022-07-10 00:00:00          26  8 2022-07-17 00:00:00          10  9 2022-07-24 00:00:00          12 10 2022-07-31 00:00:00           2 # ℹ 99 more rows # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://analyticsphere.github.io/c4cp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Peters. Maintainer, author. Rebecca Sansale. Author.","code":""},{"path":"https://analyticsphere.github.io/c4cp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peters J, Sansale R (2024). c4cp: analytics toolkit Connect!. R package version 0.1.0, https://github.com/Analyticsphere/c4cp, https://analyticsphere.github.io/c4cp/.","code":"@Manual{,   title = {c4cp: An analytics toolkit for Connect!},   author = {Jake Peters and Rebecca Sansale},   year = {2024},   note = {R package version 0.1.0, https://github.com/Analyticsphere/c4cp},   url = {https://analyticsphere.github.io/c4cp/}, }"},{"path":[]},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"c4cp","dir":"","previous_headings":"","what":"c4cp","title":"An analytics toolkit for Connect!","text":"goal c4cp …","code":""},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An analytics toolkit for Connect!","text":"can install development version c4cp like :","code":"library(devtools) install_github(\"Analyticsphere/c4cp\") library(c4cp) ## basic example code"},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"adding-features-to-the-package","dir":"","previous_headings":"","what":"Adding Features to the Package","title":"An analytics toolkit for Connect!","text":"order update package, execute following steps: Within branch,run: Push merge changes Main Create pull request: Main -> gh-pages","code":"devtools::document() pkgdown::build_site_github_pages()"},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Records by Specified Time Period — count_by_period","title":"Aggregate Records by Specified Time Period — count_by_period","text":"Transforms date column dbplyr table connected BigQuery truncating date start specified period (week, month, quarter) aggregates data counting number records period.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Records by Specified Time Period — count_by_period","text":"","code":"count_by_period(   tbl,   date_col,   period = \"week\",   week_start = \"MONDAY\",   date_type = \"string\" )"},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Records by Specified Time Period — count_by_period","text":"tbl dbplyr table object connected BigQuery. Typically obtained using tbl(con, \"table_name\"). date_col quoted unquoted column name representing date transformed aggregated. Utilizes tidy evaluation flexibility. period character string specifying aggregation period. Acceptable values \"week\", \"month\", \"quarter\". Defaults \"week\". week_start character string indicating starting day week period = \"week\". Acceptable values \"MONDAY\" \"SUNDAY\". Defaults \"MONDAY\". parameter ignored period \"month\" \"quarter\". date_type character string specifying data type date_col. Acceptable values \"string\" \"timestamp\". Defaults \"string\".","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Records by Specified Time Period — count_by_period","text":"dbplyr table object containing two columns: period_start start date aggregation period (Monday weeks, first day month months, first day quarter quarters). num_records count records within aggregation period.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Records by Specified Time Period — count_by_period","text":"count_by_period function designed streamline process aggregating time-series data specified periods. leverages dplyr dbplyr packages translate R code optimized SQL queries compatible BigQuery. Key Features: **Flexible Aggregation:** Supports weekly, monthly, quarterly aggregations. **Custom Week Start:** Allows specification week's starting day (Monday Sunday) weekly aggregations. **Tidy Evaluation:** Accepts quoted unquoted column names ease use. **Performance Optimized:** Designed work efficiently large datasets BigQuery translating operations SQL. Note: Ensure date_col contains valid date values prevent errors transformation process. function automatically filters NULL dates.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Records by Specified Time Period — count_by_period","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) library(dbplyr) library(bigrquery) library(DBI)  # Establish a connection to BigQuery project_id <- \"nih-nci-dceg-connect-stg-5519\" dataset_id <- \"FlatConnect\" con <- dbConnect(   bigrquery::bigquery(),   project = project_id,   dataset = dataset_id,   use_legacy_sql = FALSE )  # Reference your BigQuery table your_table <- tbl(con, \"FlatConnect.participants_JP\")  # Aggregate counts by week weekly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"week\",   date_type = \"string\" ) weekly_counts_local <- weekly_counts %>% collect() print(weekly_counts_local)  # Aggregate counts by month monthly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"month\",   date_type = \"string\" ) monthly_counts_local <- monthly_counts %>% collect() print(monthly_counts_local)  # Aggregate counts by quarter quarterly_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"quarter\",   date_type = \"string\" ) quarterly_counts_local <- quarterly_counts %>% collect() print(quarterly_counts_local)  # Aggregate counts by week starting on Sunday weekly_sunday_counts <- count_by_period(   tbl = your_table,   date_col = d_471593703,   period = \"week\",   week_start = \"SUNDAY\",   date_type = \"string\" ) weekly_sunday_counts_local <- weekly_sunday_counts %>% collect() print(weekly_sunday_counts_local) } # }"},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Colors from Palette — select_colors","title":"Select Colors from Palette — select_colors","text":"function selects specified number colors c4cp color palette.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Colors from Palette — select_colors","text":"","code":"select_colors(palette, num_series)"},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Colors from Palette — select_colors","text":"palette list color palettes generated color_palette(). num_series integer specifying number colors select.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Colors from Palette — select_colors","text":"character vector selected color hex codes.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Colors from Palette — select_colors","text":"","code":"palettes <- color_palette() selected <- select_colors(palettes, 10) plot(x,y, col = selected[1]) #> Error: object 'x' not found"}]
