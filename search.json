[{"path":"https://analyticsphere.github.io/c4cp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 c4cp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://analyticsphere.github.io/c4cp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Peters. Maintainer, author. Rebecca Sansale. Author.","code":""},{"path":"https://analyticsphere.github.io/c4cp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peters J, Sansale R (2024). c4cp: analytics toolkit Connect!. R package version 0.1.0, https://github.com/Analyticsphere/c4cp, https://analyticsphere.github.io/c4cp/.","code":"@Manual{,   title = {c4cp: An analytics toolkit for Connect!},   author = {Jake Peters and Rebecca Sansale},   year = {2024},   note = {R package version 0.1.0, https://github.com/Analyticsphere/c4cp},   url = {https://analyticsphere.github.io/c4cp/}, }"},{"path":[]},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"c4cp","dir":"","previous_headings":"","what":"c4cp","title":"An analytics toolkit for Connect!","text":"goal c4cp …","code":""},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An analytics toolkit for Connect!","text":"can install development version c4cp like :","code":"library(devtools) install_github(\"Analyticsphere/c4cp\") library(c4cp) ## basic example code"},{"path":"https://analyticsphere.github.io/c4cp/index.html","id":"adding-features-to-the-package","dir":"","previous_headings":"","what":"Adding Features to the Package","title":"An analytics toolkit for Connect!","text":"order update package, execute following steps: Within branch,run: Push merge changes Main Create pull request: Main -> gh-pages","code":"devtools::document() pkgdown::build_site_github_pages()"},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Records by Specified Time Period — count_by_period","title":"Aggregate Records by Specified Time Period — count_by_period","text":"Transforms date column dbplyr table connected BigQuery truncating date start specified period (week month) aggregates data counting number records period.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Records by Specified Time Period — count_by_period","text":"","code":"count_by_period(tbl, date_col, period = \"week\", week_start = \"MONDAY\")"},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Records by Specified Time Period — count_by_period","text":"tbl dbplyr table object connected BigQuery. Typically obtained using tbl(con, \"table_name\"). date_col quoted unquoted column name representing date transformed aggregated. Utilizes tidy evaluation flexibility. period character string specifying aggregation period. Acceptable values \"week\" \"month\". Defaults \"week\". week_start character string indicating starting day week period = \"week\". Acceptable values \"MONDAY\" \"SUNDAY\". Defaults \"MONDAY\". parameter ignored period = \"month\".","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Records by Specified Time Period — count_by_period","text":"dbplyr table object containing two columns: period_start start date aggregation period (Monday weeks first day month). num_records count records within aggregation period.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Records by Specified Time Period — count_by_period","text":"count_by_period function designed streamline process aggregating time-series data specified periods. leverages dplyr dbplyr packages translate R code optimized SQL queries compatible BigQuery. Key Features: **Flexible Aggregation:** Supports weekly monthly aggregations. **Custom Week Start:** Allows specification week's starting day (Monday Sunday) weekly aggregations. **Tidy Evaluation:** Accepts quoted unquoted column names ease use. **Performance Optimized:** Designed work efficiently large datasets BigQuery translating operations SQL. Note: Ensure date_col contains valid date values prevent errors transformation process. function automatically filters NULL dates.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/count_by_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Records by Specified Time Period — count_by_period","text":"","code":"if (FALSE) { # \\dontrun{ # Load necessary libraries library(dplyr) library(dbplyr) library(DBI) library(bigrquery)  # Establish a connection to BigQuery project_id <- \"your-project-id\" dataset_id <- \"your_dataset\" con <- dbConnect(   bigrquery::bigquery(),   project = project_id,   dataset = dataset_id,   use_legacy_sql = FALSE )  # Reference your BigQuery table your_table <- tbl(con, \"your_table\")  # Aggregate counts by week (default settings) weekly_counts <- count_by_period(your_table, p.d_471593703) weekly_counts_local <- weekly_counts %>% collect() print(weekly_counts_local)  # Aggregate counts by week starting on Sunday weekly_sunday_counts <- count_by_period(your_table, p.d_471593703, period = \"week\", week_start = \"SUNDAY\") weekly_sunday_counts_local <- weekly_sunday_counts %>% collect() print(weekly_sunday_counts_local)  # Aggregate counts by month monthly_counts <- count_by_period(your_table, p.d_471593703, period = \"month\") monthly_counts_local <- monthly_counts %>% collect() print(monthly_counts_local) } # }"},{"path":"https://analyticsphere.github.io/c4cp/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"This function prints hello — hello","title":"This function prints hello — hello","text":"function prints hello","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function prints hello — hello","text":"","code":"hello()"},{"path":"https://analyticsphere.github.io/c4cp/reference/hello.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function prints hello — hello","text":"string","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function prints hello — hello","text":"","code":"hello() #> [1] \"Hello, world!\""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Colors from Palette — select_colors","title":"Select Colors from Palette — select_colors","text":"function selects specified number colors c4cp color palette.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Colors from Palette — select_colors","text":"","code":"select_colors(palette, num_series)"},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Colors from Palette — select_colors","text":"palette list color palettes generated color_palette(). num_series integer specifying number colors select.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Colors from Palette — select_colors","text":"character vector selected color hex codes.","code":""},{"path":"https://analyticsphere.github.io/c4cp/reference/select_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Colors from Palette — select_colors","text":"","code":"palettes <- color_palette() selected <- select_colors(palettes, 10) plot(x,y, col = selected[1]) #> Error: object 'x' not found"}]
